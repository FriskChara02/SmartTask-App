//
//  TermsOfServiceView.swift
//  SmartTask
//
//  Created by Loi Nguyen on 27/4/25.
//

import SwiftUI

struct TermsOfServiceView: View {
    @Environment(\.themeColor) var themeColor
    @Environment(\.colorScheme) var colorScheme
    @State private var isContactExpanded: Bool = false
    @State private var showCopyToast: Bool = false
    
    var body: some View {
        ZStack {
            ScrollView(.vertical, showsIndicators: false) {
                VStack(spacing: 20) {
                    // MARK: - Introduction Section
                    introductionSection
                    
                    // MARK: - Rights and Responsibilities Section
                    rightsAndResponsibilitiesSection
                    
                    // MARK: - Usage Policy Section
                    usagePolicySection
                    
                    // MARK: - Contact Section
                    contactSection
                }
                .padding()
            }
            .background(
                LinearGradient(
                    gradient: Gradient(colors: [themeColor.opacity(0.1), Color(UIColor.systemBackground)]),
                    startPoint: .top,
                    endPoint: .bottom
                )
            )
            .ignoresSafeArea(.all, edges: .horizontal)
            .navigationTitle("Terms of Service üìú")
            .navigationBarTitleDisplayMode(.inline)
            
            // Toast for copy confirmation
            if showCopyToast {
                Toast(message: "B·∫°n ƒë√£ copy th√†nh c√¥ng ^^")
                    .transition(.opacity)
                    .zIndex(1)
            }
        }
    }
    
    // MARK: - Introduction Section
    private var introductionSection: some View {
        VStack(alignment: .center, spacing: 12) {
            Text("ƒêi·ªÅu kho·∫£n d·ªãch v·ª• ‚ùÄ")
                .font(.system(size: 22, weight: .bold, design: .rounded))
                .foregroundColor(.primary)
                .frame(maxWidth: .infinity)
            
            Text("Ch√†o b·∫°n ƒë·∫øn v·ªõi SmartTask! ‚ù§Ô∏é")
                .font(.system(size: 17, weight: .medium, design: .rounded))
                .foregroundColor(.primary)
                .frame(maxWidth: .infinity)
            
            Text("B·∫±ng c√°ch s·ª≠ d·ª•ng SmartTask, b·∫°n ƒë·ªìng √Ω v·ªõi c√°c ƒëi·ªÅu kho·∫£n d∆∞·ªõi ƒë√¢y. H√£y ƒë·ªçc k·ªπ nh√©!")
                .font(.system(size: 15, design: .rounded))
                .foregroundColor(.secondary)
                .frame(maxWidth: .infinity)
        }
        .padding()
        .background(
            LinearGradient(
                gradient: Gradient(colors: [themeColor.opacity(0.15), Color(UIColor.systemBackground)]),
                startPoint: .topLeading,
                endPoint: .bottomTrailing
            )
        )
        .cornerRadius(30)
        .shadow(color: .gray.opacity(0.2), radius: 4, x: 0, y: 2)
    }
    
    // MARK: - Rights and Responsibilities Section
    private var rightsAndResponsibilitiesSection: some View {
        VStack(alignment: .center, spacing: 8) {
            Text("Quy·ªÅn v√† Tr√°ch nhi·ªám ‚ú¶")
                .font(.system(size: 20, weight: .semibold, design: .rounded))
                .foregroundColor(.primary)
                .padding(.bottom, 8)
                .frame(maxWidth: .infinity)
            
            // Quy·ªÅn c·ªßa b·∫°n
            termItem(
                icon: "person.circle.fill",
                color: .blue,
                title: "Quy·ªÅn c·ªßa b·∫°n",
                description: "B·∫°n c√≥ quy·ªÅn s·ª≠ d·ª•ng SmartTask ƒë·ªÉ qu·∫£n l√Ω c√¥ng vi·ªác, s·ª± ki·ªán v√† t√πy ch·ªânh theme."
            )
            
            // Tr√°ch nhi·ªám c·ªßa b·∫°n
            termItem(
                icon: "exclamationmark.triangle.fill",
                color: .orange,
                title: "Tr√°ch nhi·ªám c·ªßa b·∫°n",
                description: "Kh√¥ng s·ª≠ d·ª•ng SmartTask cho m·ª•c ƒë√≠ch b·∫•t h·ª£p ph√°p ho·∫∑c l√†m ·∫£nh h∆∞·ªüng ƒë·∫øn ng∆∞·ªùi kh√°c."
            )
            
            // Kh√¥ng gian t√≠ch c·ª±c
            termItem(
                icon: "hands.sparkles.fill",
                color: .green,
                title: "Kh√¥ng gian t√≠ch c·ª±c",
                description: "SmartTask ƒë·ªÅ cao s·ª± c·ªüi m·ªü, th√¢n thi·ªán. H√£y t√¥n tr·ªçng v√† h·ªó tr·ª£ nhau ƒë·ªÉ x√¢y d·ª±ng m·ªôt c·ªông ƒë·ªìng ·∫•m √°p."
            )
            
            // Th·ªÉ hi·ªán s·ª± t·ª≠ t·∫ø
            termItem(
                icon: "heart.fill",
                color: .pink,
                title: "Th·ªÉ hi·ªán s·ª± t·ª≠ t·∫ø",
                description: "ƒê·ªëi x·ª≠ v·ªõi m·ªçi ng∆∞·ªùi nh∆∞ c√°ch b·∫°n mu·ªën ƒë∆∞·ª£c ƒë·ªëi x·ª≠. H√£y x√¢y d·ª±ng, l·∫Øng nghe, v√† lan t·ªèa nƒÉng l∆∞·ª£ng t√≠ch c·ª±c."
            )
            
            // Nh·ªØng ƒëi·ªÅu kh√¥ng ƒë∆∞·ª£c ch·∫•p nh·∫≠n
            termItem(
                icon: "nosign",
                color: .red,
                title: "Nh·ªØng ƒëi·ªÅu KH√îNG ƒë∆∞·ª£c ch·∫•p nh·∫≠n",
                description: "Spam, troll, ph√° ho·∫°i, qu·∫£ng c√°o tr√°i ph√©p, n·ªôi dung ƒë·ªôc h·∫°i, g√¢y r·ªëi, x√∫c ph·∫°m, ph√¢n bi·ªát v√πng mi·ªÅn... s·∫Ω b·ªã x·ª≠ l√Ω nghi√™m."
            )
            
            // Voice Chat v√† kh√¥ng gian ri√™ng t∆∞
            termItem(
                icon: "mic.fill",
                color: .purple,
                title: "Voice Chat & Kh√¥ng gian ri√™ng",
                description: "T√¥n tr·ªçng ph√≤ng voice, tr√°nh spam, kh√¥ng g√¢y kh√≥ ch·ªãu. Ch·ªß ph√≤ng c√≥ quy·ªÅn kick n·∫øu c·∫ßn thi·∫øt."
            )
            
            // L∆∞u √Ω quan tr·ªçng
            termItem(
                icon: "lightbulb.fill",
                color: .yellow,
                title: "L∆∞u √Ω",
                description: "Vi ph·∫°m s·∫Ω b·ªã x·ª≠ l√Ω t√πy m·ª©c ƒë·ªô. C√°c quy t·∫Øc c√≥ th·ªÉ c·∫≠p nh·∫≠t b·∫•t k·ª≥ l√∫c n√†o. Tu√¢n th·ªß ƒêi·ªÅu kho·∫£n & Nguy√™n t·∫Øc c·ªông ƒë·ªìng SmartTask."
            )
            
            // Th√¥ng ƒëi·ªáp cu·ªëi c√πng
            termItem(
                icon: "leaf.fill",
                color: .mint,
                title: "Th√¥ng ƒëi·ªáp t·ª´ SmartTask",
                description: "üåø SmartTask kh√¥ng ph·∫£i Tinder! H√£y gieo m·∫ßm tr√°ch nhi·ªám v√† y√™u th∆∞∆°ng c√πng nhau nh√©!"
            )
        }
        .padding()
        .background(
            LinearGradient(
                gradient: Gradient(colors: [themeColor.opacity(0.1), Color(UIColor.systemBackground)]),
                startPoint: .topLeading,
                endPoint: .bottomTrailing
            )
        )
        .cornerRadius(30)
        .shadow(color: .gray.opacity(0.2), radius: 4, x: 0, y: 2)
    }
    
    // MARK: - Usage Policy Section
    private var usagePolicySection: some View {
        VStack(alignment: .center, spacing: 8) {
            Text("Ch√≠nh s√°ch s·ª≠ d·ª•ng ‚ãÜÀô‚ü°")
                .font(.system(size: 20, weight: .semibold, design: .rounded))
                .foregroundColor(.primary)
                .padding(.bottom, 8)
                .frame(maxWidth: .infinity)
            
            // B·∫£o v·ªá t√†i kho·∫£n
            termItem(
                icon: "lock.shield.fill",
                color: .green,
                title: "B·∫£o v·ªá t√†i kho·∫£n",
                description: "B·∫°n ch·ªãu tr√°ch nhi·ªám b·∫£o m·∫≠t th√¥ng tin ƒëƒÉng nh·∫≠p c·ªßa m√¨nh."
            )
            
            // C·∫≠p nh·∫≠t d·ªãch v·ª•
            termItem(
                icon: "arrow.triangle.2.circlepath",
                color: .purple,
                title: "C·∫≠p nh·∫≠t d·ªãch v·ª•",
                description: "SmartTask c√≥ quy·ªÅn c·∫≠p nh·∫≠t ho·∫∑c thay ƒë·ªïi d·ªãch v·ª• m√† kh√¥ng c·∫ßn th√¥ng b√°o tr∆∞·ªõc."
            )
        }
        .padding()
        .background(
            LinearGradient(
                gradient: Gradient(colors: [themeColor.opacity(0.1), Color(UIColor.systemBackground)]),
                startPoint: .topLeading,
                endPoint: .bottomTrailing
            )
        )
        .cornerRadius(30)
        .shadow(color: .gray.opacity(0.2), radius: 4, x: 0, y: 2)
    }
    
    // MARK: - Contact Section
    private var contactSection: some View {
        Button(action: {
            isContactExpanded.toggle()
        }) {
            DisclosureGroup(
                isExpanded: $isContactExpanded,
                content: {
                    Button(action: {
                        UIPasteboard.general.string = "loi.nguyenbao02@gmail.com"
                        withAnimation {
                            showCopyToast = true
                        }
                        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
                            withAnimation {
                                showCopyToast = false
                            }
                        }
                    }) {
                        HStack(spacing: 12) {
                            Image(systemName: "envelope.fill")
                                .font(.system(size: 16))
                                .foregroundColor(.teal)
                                .frame(width: 30)
                            
                            Text("Email h·ªó tr·ª£: loi.nguyenbao02@gmail.com")
                                .font(.system(size: 16, weight: .medium, design: .rounded))
                                .foregroundColor(.primary)
                            
                            Spacer()
                            
                            Image(systemName: "document.on.document")
                                .font(.system(size: 14))
                                .foregroundColor(.gray)
                        }
                        .padding(.vertical, 12)
                        .padding(.horizontal, 16)
                        .background(Color(UIColor.systemBackground).opacity(0.95))
                        .cornerRadius(25)
                        .shadow(color: .gray.opacity(0.2), radius: 2, x: 0, y: 1)
                    }
                    .buttonStyle(PlainButtonStyle())
                },
                label: {
                    Text("Li√™n h·ªá v·ªÅ ƒëi·ªÅu kho·∫£n ·ù∞.·êü")
                        .font(.system(size: 20, weight: .semibold, design: .rounded))
                        .foregroundColor(.primary)
                        .frame(maxWidth: .infinity, alignment: .center)
                }
            )
            .padding()
            .background(
                LinearGradient(
                    gradient: Gradient(colors: [themeColor.opacity(0.1), Color(UIColor.systemBackground)]),
                    startPoint: .topLeading,
                    endPoint: .bottomTrailing
                )
            )
            .cornerRadius(30)
            .shadow(color: .gray.opacity(0.2), radius: 4, x: 0, y: 2)
            .animation(.easeInOut(duration: 0.5), value: isContactExpanded)
        }
        .buttonStyle(PlainButtonStyle())
    }
    
    // MARK: - Helper: Term Item
    private func termItem(icon: String, color: Color, title: String, description: String) -> some View {
        HStack(alignment: .top, spacing: 12) {
            Image(systemName: icon)
                .font(.system(size: 16))
                .foregroundColor(color)
                .frame(width: 30)
            
            VStack(alignment: .leading, spacing: 4) {
                Text(title)
                    .font(.system(size: 16, weight: .semibold, design: .rounded))
                    .foregroundColor(.primary)
                
                Text(description)
                    .font(.system(size: 15, design: .rounded))
                    .foregroundColor(.secondary)
                    .frame(maxWidth: .infinity, alignment: .leading)
            }
        }
        .padding(.vertical, 12)
        .padding(.horizontal, 16)
        .background(Color(UIColor.systemBackground).opacity(0.95))
        .cornerRadius(25)
        .shadow(color: .gray.opacity(0.2), radius: 2, x: 0, y: 1)
        .frame(minHeight: 100)
    }
}

#Preview {
    NavigationStack {
        TermsOfServiceView()
            .environment(\.themeColor, .blue)
    }
}
